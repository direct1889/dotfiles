
" Encode
" 文字コードをUTF-8に設定する
set encoding=UTF-8
set fileencoding=UTF-8
set termencoding=UTF-8

" File
" ファイル変更中でも他のファイルを開けるようにする
set hidden
" ファイル内容が変更されると自動読み込みする
set autoread


" Backup
" undofileを作成しない
set noundofile
" swapfileを作らない
set noswapfile
" backupfileを作らない
set nobackup


" Search
" インクリメンタルサーチを行う
set incsearch
" 検索結果をハイライトする
set hlsearch
nmap <Esc><Esc> :nohlsearch<CR><Esc>
" 検索時に文字の大小を区別しない
set ignorecase
" 検索時に大文字を含んでいたら大小を区別する
set smartcase
" 検索をファイルの先頭へループする
set wrapscan


" Display
" カラースキーマを設定
colorscheme desert
" デフォルトの配色をdarkに設定する
set background=dark
" シンタックスカラーリングを設定する
syntax on
" 編集中のファイル名を表示する
set title
" 行番号を表示する
set number
" カーソルが何行目の何列目に置かれているかを表示する
set ruler
" 入力中のコマンドを表示する
set showcmd
" 閉じ括弧の入力時に対応する括弧を表示する
set showmatch
" showmatchの表示時間
set matchtime=3
" ステータスラインを常に表示する
set laststatus=2
" 不可視文字を表示する
set list
" 不可視文字を設定する
set listchars=tab:>\ ,trail:_


" Input
" ヤンクでクリップボードにコピーする
set clipboard=unnamed
" 改行時に前の行のインデントを継続する
set autoindent
" 改行時に入力された行の末尾に合わせて次の行のインデントを増減する
set smartindent
" 行頭での<Tab>の幅
set shiftwidth=4
" 行頭以外での<Tab>の幅
set tabstop=4
" カーソルを行頭、行末で止まらないようにする
set whichwrap=b,s,h,l,<,>,[,]


set nowrap

set wildmenu
set wildmenu wildmode=list:full

"set softtabstop=4
"set expandtab
"set smarttab

source $VIMRUNTIME/macros/matchit.vim
let b:match_ignorecase = 1

set nf=hex
set mouse=a

inoremap <C-j> <Esc>
inoremap [] []<left>
inoremap () ()<left>
inoremap {} {}<left>
inoremap "" ""<left>
inoremap '' ''<left>

set cursorline
highlight CursorLine term=none cterm=none ctermfg=darkgray ctermbg=none

set runtimepath& runtimepath+=~/vimfiles/
runtime! userautoload/*.vim

set backspace=eol


" Key Bind
" vimrc
nnoremap <F6> :<C-u>tabe $MYVIMRC<CR>
nnoremap <F5> :<C-u>source $MYVIMRC<CR>

" operation
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

nnoremap $ g$
nnoremap g$ $

" 空行へジャンプ
nnoremap <C-j> }
nnoremap <C-k> {

"delete
nnoremap x "_x
nnoremap d "_d
nnoremap D "_D
nnoremap c "_c
nnoremap C "_C

vnoremap d "_d
vnoremap c "_c

nnoremap Y y$

cnoremap %% <C-R>=expand('%:p:h').'/'<cr>


"visual-mode
"Shift-I/A in visual-line move like in visual-block
vnoremap <expr> I  <SID>force_blockwise_visual('I')
vnoremap <expr> A  <SID>force_blockwise_visual('A')

function! s:force_blockwise_visual(next_key)
  if mode() ==# 'v'
    return "\<C-v>" . a:next_key
  elseif mode() ==# 'V'
    return "\<C-v>0o$" . a:next_key
  else  " mode() ==# "\<C-v>"
    return a:next_key
  endif
endfunction
"<SID>	: ScriptID : Add unique number to function
"s:		: Script local
"a:		: argument


"command-mode
cnoremap <expr> / <SID>default_escape('/')
cnoremap <expr> ( <SID>default_escape('(')
cnoremap <expr> ) <SID>default_escape(')')

function! s:default_escape(escapedcmd)
	if getcmdtype() == '/'
		return '\' . a:escapedcmd
	else
		return a:escapedcmd
	endif
endfunction


" <Space>+
nnoremap [pre]		<Nop>
nmap	 <Space>	 [pre]

nnoremap [pre]o o<Esc>
nnoremap [pre]O O<Esc>
nnoremap [pre]h ^
nnoremap [pre]l $
nnoremap [pre]m %
nnoremap [pre]/ *<C-o>
nnoremap [pre]\ #<C-o>

nnoremap [pre]9  f)a
nnoremap [pre].  f>a
nnoremap [pre]]  f]a
nnoremap [pre]]] f}a

"inoremap <C-)> <Esc>f)a
"inoremap <C->> <Esc>f>a
"inoremap <C-]> <Esc>f]a
"inoremap <C-}> <Esc>f}a

" replace word under the cursor
noremap  [pre]: *:nohlsearch<Enter><C-o>:%s///gc<left><left><left>

"Cut
nnoremap [pre]x x
nnoremap [pre]d d
nnoremap [pre]<S-d> D
nnoremap [pre]c c
nnoremap [pre]C C

"Paste
nnoremap [pre]p $p

" C++
nnoremap <Space>sc	<S-i>//<Esc>
nnoremap <Space>uc	^xx

" unuseful
nnoremap ZQ :q
nnoremap ZZ :q

